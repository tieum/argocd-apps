apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: lidarr
  annotations:
    avp.kubernetes.io/path: "../secrets.sops.yaml"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  sources:
    - chart: lidarr
      repoURL: tccr.io/truecharts
      targetRevision: 24.3.1
      helm:
        version: v3
        valuesObject:
          credentials:
            minio:
              type: s3
              url: <minio | jsonPath {.endpoint}>
              bucket: "backups"
              accessKey: <minio | jsonPath {.accessKey}>
              secretKey: <minio | jsonPath {.secretKey}>
              encrKey: <minio | jsonPath {.encryptionKey}>
          cnpg:
            main:
              enabled: true
              backups:
                enabled: true
                credentials: minio
              recovery:
                method: object_store
                credentials: minio
              user: lidarr
              database: lidarr
              cluster:
                  storage:
                    size: 1Gi
                  walStorage:
                    size: 1Gi
          image:
            repository: ghcr.io/hotio/lidarr
            tag: pr-plugins
          workload:
            main:
              podSpec:
                containers:
                  main:
                    probes:
                      liveness:
                        enabled: true
                        type: http
                        path: /ping
                        spec:
                          initialDelaySeconds: 60
                          periodSeconds: 20
                          timeoutSeconds: 15
                          failureThreshold: 10
                          successThreshold: 1
                      readiness:
                        enabled: false
                      startup:
                        enabled: true
                        type: http
                        path: /ping
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: false
                      runAsUser: 0
                      runAsGroup: 0
                    env:
                      S6_READ_ONLY_ROOT: 1
                      LIDARR__APP__INSTANCENAME: Lidarr
                      LIDARR__APP__LAUNCHBROWSER: False
                      LIDARR__APP__THEME: dark
                      LIDARR__AUTH__APIKEY: <lidarr | jsonPath {.apiKey}>
                      LIDARR__AUTH__METHOD: Forms
                      LIDARR__AUTH__REQUIRED: Enabled
                      LIDARR__LOG__ANALYTICS_ENABLED: False
                      LIDARR__LOG__DBENABLED: False
                      LIDARR__LOG__LEVEL: info
                      LIDARR__POSTGRES__HOST: lidarr-cnpg-main-rw
                      LIDARR__POSTGRES__MAINDB: lidarr
                      LIDARR__POSTGRES__PASSWORD: <lidarr | jsonPath {.dbPassword}>
                      LIDARR__POSTGRES__PORT: 5432
                      LIDARR__POSTGRES__USER: postgres
                      LIDARR__SERVER__BINDADDRESS: "*"
                      LIDARR__SERVER__ENABLESSL: False
                      LIDARR__UPDATE__MECHANISM: Docker
                      LIDARR__SERVER__PORT: 8686
                      LIDARR__SERVER__SSLCERTPATH: ""
                      LIDARR__SERVER__SSLCERTPASSWORD: ""
                      LIDARR__SERVER__SSLPORT: 6969
                      LIDARR__SERVER__URLBASE: ""
                  exportarr:
                    env:
                      APIKEY: <lidarr | jsonPath {.apiKey}>
                      CONFIG: ""
                      ENABLE_ADDITIONAL_METRICS: true
          persistence:
            config:
              size: 10Gi
            servarr:
              enabled: true
              type: nfs
              server: <nfs | jsonPath {.ip}>
              path: <nfs | jsonPath {.mountpoint}>
              mountPath: "/servarr"
              accessModes: [ReadWriteMany]
            slskd-downloads:
              enabled: true
              type: nfs
              server: <nfs | jsonPath {.ip}>
              path: <nfs | jsonPath {.mountpoint}>/downloads/slskd
              mountPath: "/slskd-downloads"
              accessModes: [ReadWriteMany]
          portal:
            open:
              enabled: false
          updated: false
    - chart: k8s-resources
      repoURL: ghcr.io/deliveryhero/helm-charts
      targetRevision: 0.8.0
      helm:
        version: v3
        valuesObject:
          Ingresses:
            - name: lidarr
              fullnameOverride: lidarr
              ingressClassName: tailscale
              rules:
                - http:
                    paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: lidarr
                            port:
                              number: 8686
              tls:
                 - hosts:
                     - lidarr
  destination:
    name: "in-cluster"
    namespace: lidarr
  syncPolicy:
    automated: {}
    syncOptions:
    - CreateNamespace=true
    - ApplyOutOfSyncOnly=true
